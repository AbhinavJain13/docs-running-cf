---
title: Configuring SSH Access
---

<strong><%= modified_date %></strong>

This topic describes how to configure your Cloud Foundry deployment to allow SSH access to application instances, and includes details about load balancing SSH sessions.

## <a id='architecture-configuration'></a> Cloud Foundry Configuration

You configure Application SSH access differently for Diego-based vs DEA-based Cloud Foundry architectures.

### <a id='diego-configuration'></a> Diego Architecture

To enable SSH access to apps running on Diego, you must register your `ssh-proxy` client with your User Account and Authentication (UAA) server and configure the properties in your deployment manifests by following the steps below.

To configure manifest properties, you can edit them directly or put them in stub files with [merge tags](https://github.com/cloudfoundry-incubator/spiff#-merge-) that you pass to `generate_deployment_manifest` or another spiff-based manifest-generation script.

#### <a id='cf-manifest'></a> UAA Client Registration

To enable SSH access to apps, you must have `ssh-proxy` registered as a client with your UAA server. For more information about configuring UAA, review the [User Account and Authentication (UAA) Server](../concepts/architecture/uaa.html) topic.

1. Install the UAA Command Line Interface (UAAC).
<pre class="terminal">$ gem install cf-uaac</pre>

1. Target your UAA server.
<pre class="terminal">$ uaac target uaa.YOUR-SYSTEM-DOMAIN</pre>

1. Authenticate and retrieve your admin client token. When prompted with `Client secret`, enter your admin credentials.
<pre class="terminal">$ uaac token client get admin
Client secret:  ********************
Successfully fetched token via client credentials grant.
Target: <span>https</span>://uaa.YOUR-SYSTEM-DOMAIN
Context: admin, from client admin</pre>

1. Display your client registrations. 
<pre class="terminal">$ uaac clients
...
  ssh-proxy
    scope: cloud\_controller.read cloud\_controller.write openid
    resource\_ids: none
    authorized\_grant_types: authorization\_code
    redirect\_uri: /login
    autoapprove: true
    action: none
    authorities: uaa.none
    lastmodified: 1455922096000
...
</pre>

1. If `ssh-proxy` does not appear in your client registrations, you must register a `ssh-proxy` client with UAA.
<pre class="terminal">$ uaac client add ssh-proxy -i
New client secret: ******
Verify new client secret: ******
scope (list): cloud\_controller.read cloud\_controller.write openid
authorized grant types (list): authorization_code
authorities (list): uaa.none
access token validity (seconds): [Press Enter]
refresh token validity (seconds): [Press Enter]
redirect\_uri: /login
autoapprove: true
signup redirect url(url): [Press Enter]
</pre>

#### <a id='diego-manifest'></a> Diego Manifest

Your manifest for Diego, `diego.yml`, should include the following properties:
<pre><code>properties:
  ssh\_proxy:
    host\_key: |
      -----BEGIN RSA PRIVATE KEY-----
      YOUR\_PRIVATE\_KEY
      -----END RSA PRIVATE KEY-----
    enable\_cf\_auth: true
    enable\_diego\_auth: false
    diego\_credentials: "YOUR\_BASIC\_AUTH\_PASSWORD"
    uaa\_secret: SSH-PROXY-SECRET
    uaa\_token_url: <span>https</span>://uaa.YOUR-SYSTEM-DOMAIN/oauth/token
</code></pre>

1. `ssh_proxy.host_key`: Supply the PEM-encoded private key from the RSA key pair that you originally generated for your deployment. This key secures the Application SSH proxy running in each container.
<p class="note"><strong>Note</strong>: Pivotal recommends that you generate a unique key pair for each deployment.</p>

1. Set the way SSH proxies authenticate access, via CF Authentication or Diego Authentication.
  - For a production environment, specify CF Authentication only by setting `ssh_proxy.enable_cf_auth` to `true` and `ssh_proxy.enable_diego_auth` to `false`. This restricts SSH access to the `cf ssh` command, which requires a RSA key pair.
  - In a development environment you can enable less-secure Diego Authentication by setting `ssh_proxy.enable_diego_auth` to `true` and `ssh_proxy.diego_credentials` to a password. This lets any user with the password establish SSH connections through the Diego API, without running `cf ssh`.

1. For `SSH-PROXY-SECRET`, provide the `Client secret` for the `ssh-proxy` client registered with your UAA server.

1. To complete the `uaa_token_url` field, provide `YOUR-SYSTEM-DOMAIN`.

#### <a id='cf-manifest'></a> Cloud Foundry Manifest

Your manifest for Cloud Foundry, `cf-deployment.yml` should include the following properties:

<pre><code>properties:
  app_ssh:
    host_key_fingerprint: HOST-KEY-FINGERPRINT
    oauth_client_id: ssh-proxy
  cc:
    allow_app_ssh_access: true
  uaa:
    clients:
      ssh-proxy:
        authorized-grant-types: authorization_code
        autoapprove: true
        override: true
        redirect-uri: /login
        scope: openid,cloud_controller.read,cloud_controller.write
        secret: SSH-PROXY-SECRET
</code></pre>

1. Change `HOST-KEY-FINGERPRINT` to the public key fingerprint of the RSA key pair that you generated for your deployment.

1. For `SSH-PROXY-SECRET`, provide the `Client secret` for the `ssh-proxy` client registered with your UAA server. This should match the `SSH-PROXY-SECRET` you entered in the Diego manifest under `uaa_secret`.

### <a id="dea-architecture"></a> DEA Architecture

For Cloud Foundry app instances running on DEAs you can configure SSH access with these BOSH properties.

The following BOSH properties are relevant for SSH configuration in [cf-release](https://github.com/cloudfoundry/cf-release):

- `app_ssh.host_key_fingerprint`: Fingerprint of the public key presented by the SSH host (in this case, Diego's layer of SSH proxies). This should be the fingerprint of the public key of the key pair generated for the `diego.ssh_proxy.host_key` value in the Diego deployment manifest.
- `app_ssh.port`: Port of the externally routable SSH endpoint advertised through the Cloud Controller info endpoint.
- `cc.allow_app_ssh_access`: As mentioned above, whether to allow SSH access at all for CF app instances.
	
<p class='note'><strong>Note: </strong>You need to configure and deploy Diego even if you run your apps under DEA architecture.</p>

If SSH access is allowed for the CF deployment, Cloud Controller will advertise the SSH endpoint to be `ssh.<system-domain>`, accepting traffic on the port given in `app_ssh.port`. Cloud Controller's `/v2/info` endpoint provides this SSH endpoint in its `app_ssh_endpoint` field and the host key fingerprint above in its `app_ssh_host_key_fingerprint` field.

## <a id="ssh-load-balancer-configuration"></a> SSH Load Balancer configuration

If the HAproxy job from cf-release is used as the gorouter load balancer and `cc.allow_app_ssh_access` is set to true, HAproxy will also serve as the load balancer for Diego's SSH proxies. This configuration relies on the presence of the same consul server cluster that Diego components use for service discovery. This configuration also works well for deployments where all traffic on the system domain and its subdomains is directed towards the HAproxy job, as is the case for a BOSH-Lite CF deployment on the default `10.244.0.34.xip.io` domain.

### <a id="aws"></a>AWS Deployments

For AWS deployments, where the infrastructure offers load-balancing as a service through ELBs, the deployment operator can provision an ELB to balance load across the Diego SSH proxy instances. This ELB should be configured to listen to TCP traffic on the port given by the `app_ssh.port` property in the Cloud Foundry manifest and to send it to port 2222. 

In the Diego manifest, register the SSH proxies with this ELB by editing the `cloud_properties` values.

* If you used the spiff-based manifest-generation templates to produce the Diego manifest, the `cloud_properties` hashes should be specified in the `iaas_settings.resource_pool_cloud_properties` section of the `iaas-settings.yml` stub.
* Otherwise, add the ELB identifier to the `elbs` property in the `cloud_properties` hash of the Diego manifest `access_zN` resource pools. For example:

<pre><code>resource_pools:
- cloud_properties:
    availability_zone: us-east-1a
    elbs:
    - test-SSHProxyEL-16O57T64U5UAL
    instance_type: t2.nano
  name: access_z1
  network: diego1
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: '3202'
- cloud_properties:
    availability_zone: us-east-1b
    elbs:
    - test-SSHProxyEL-16O57T64U5UAL
    instance_type: t2.nano
  name: access_z2
  network: diego2
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: '3202'
- cloud_properties:
    availability_zone: us-east-1c
    elbs:
    - test-SSHProxyEL-16O57T64U5UAL
    instance_type: t2.nano
  name: access_z3
  network: diego3
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: '3202'
</code></pre>

## <a id="troubleshooting"></a>Troubleshooting

If you receive an error message attempting to SSH into an app container, refer to the following list below to help troubleshoot the issue:

<table border="1" class="nice">
  <tr>
    <th><strong>Error</strong></th>
    <th><strong>Reason</strong></th>
  </tr>
  <tr>
    <td><code>Error getting one time auth code</code></td>
    <td>Check that you have the <code>ssh-proxy</code> client registered with your UAA server.</td>
  </tr>
  <tr>
    <td><code>Error getting one time auth code</code></td>
    <td>Review the <code>uaa_secret</code> field in your Diego manifest and ensure that it matches the <code>Client secret</code> for the <code>ssh-proxy</code> client registered with your UAA server.</td>
  </tr>
  <tr>
    <td><code>Error opening SSH connection</code></td>
    <td>Verify that <code>enable_cf_auth</code> in your Diego manifest is set to <code>true</code>.</td>
  </tr>
  <tr>
    <td><code>Error opening SSH connection</code></td>
    <td>Confirm that you provided the correct UAA token URL for the <code>uaa_token_url</code> property in the Diego manifest.</td>
  </tr>
  <tr>
    <td><code>Error opening SSH connection</code></td>
    <td>Check that you provided the correct private key in your Diego manifest.</td>
  </tr>
  <tr>
    <td><code>Server error, status code: 404</code></td>
    <td>Ensure that the <code>oath_client_id</code> in your Cloud Foundry manifest matches the client ID of the SSH proxy client you registered with your UAA server. The default client ID is <code>ssh-proxy</code>.</td>
  </tr>
</table>






