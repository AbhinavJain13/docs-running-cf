---
title: Configuring SSH Access
---

<strong><%= modified_date %></strong>

This topic describes how to configure your Cloud Foundry deployment to allow Diego SSH access to application instances, and details about load balancing SSH sessions.

## <a id='diego-configuration'></a> Diego configuration

You can configure SSH access for Cloud Foundry app instances running on Diego. The SSH proxy instances facilitate access to apps with these BOSH properties:

- `diego.ssh_proxy.host_key`: The Diego SSH proxy instances utilize a PEM-encoded RSA private host key. Pivotal recommends deployment operators generate individual key pairs for each deployment and supply those in the manifest.

- `diego.ssh_proxy.enable_cf_auth`: Activates the CF Authenticator in the proxies. This property should be enabled for the `cf ssh` command to connect to the Diego SSH server running in the instance.

- `diego.ssh_proxy.enable_diego_auth`: Activates the Diego Authenticator in the proxies. For a production deployment, this property should be disabled, as it allows access to any instance running the Diego SSH server with only the receptor credentials. Developers running development deployments can enable it to provide an alternate mechanism to establish SSH sessions.

The properties `diego.ssh_proxy.cc.internal_service_hostname` and `diego.ssh_proxy.cc.external_port` should not require direct configuration if an operator uses the spiff-based manifest-generation scripts to generate the Diego deployment manifest.

## <a id="cf-configuration"></a> CF configuration

For Cloud Foundry app instances running on DEAs you can configure SSH access with these BOSH properties.

The following BOSH properties are relevant for SSH configuration in [cf-release](https://github.com/cloudfoundry/cf-release):

- `app_ssh.host_key_fingerprint`: Fingerprint of the public key presented by the SSH host (in this case, Diego's layer of SSH proxies). This should be the fingerprint of the public key of the key pair generated for the `diego.ssh_proxy.host_key` value in the Diego deployment manifest.
- `app_ssh.port`: Port of the externally routable SSH endpoint advertised through the Cloud Controller info endpoint.
- `cc.allow_app_ssh_access`: As mentioned above, whether to allow SSH access at all for CF app instances.
	
If SSH access is allowed for the CF deployment, Cloud Controller will advertise the SSH endpoint to be `ssh.<system-domain>`, accepting traffic on the port given in `app_ssh.port`. Cloud Controller's `/v2/info` endpoint provides this SSH endpoint in its `app_ssh_endpoint` field and the host key fingerprint above in its `app_ssh_host_key_fingerprint` field.

## <a id="ssh-load-balancer-configuration"></a> SSH Load Balancer configuration

If the HAproxy job from cf-release is used as the gorouter load balancer and `cc.allow_app_ssh_access` is set to true, HAproxy will also serve as the load balancer for Diego's SSH proxies. This configuration relies on the presence of the same consul server cluster that Diego components use for service discovery. This configuration also works well for deployments where all traffic on the system domain and its subdomains is directed towards the HAproxy job, as is the case for a BOSH-Lite CF deployment on the default `10.244.0.34.xip.io` domain.

For AWS deployments, where the infrastructure offers load-balancing as a service through ELBs, the deployment operator can provision an ELB to balance load across the Diego SSH proxy instances. This ELB should be configured to listen to TCP traffic on the port given in `app_ssh.port` and to send it to port 2222. In order to register the SSH proxies with this ELB, the ELB identifier should then be added to the `elbs` property in the `cloud_properties` hash of the Diego manifest `access_zN` resource pools. If the spiff-based manifest-generation templates are used to produce the Diego manifest, these `cloud_properties` hashes should be specified in the `iaas_settings.resource_pool_cloud_properties` section of the `iaas-settings.yml` stub.
