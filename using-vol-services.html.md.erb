---
title: Using an External File System (Volume Services)
owner: Core Services
---

This topic describes how Cloud Foundry (CF) app developers can read and write to a mounted filesystem from their apps. In CF, a volume service provides volumes so your app can read and/or write to a reliable, non-ephemeral file system.

## <a id="pre"></a> Prerequisite

Before you can use a volume service with your app, your CF operator must [add a volume service to your deployment](./deploy-vol-services.html).

You can run `cf marketplace` from the Cloud Foundry Command Line Interface (cf CLI). The below is an example output of the NFS volume service. If there is no volume service that fits your requirements contact your CF operator.

```
service   plans      description
nfs       Existing   Service for connecting to NFS volumes
```

## <a id="create"></a> Create and bind a Service Instance

To use a volume service deployed by your operator, you must first create an instance of the specific volume service needed service. Follow the procedures below:

1. <a href="../devguide/services/managing-services.html#marketplace">Create a service instance.</a>

<p class="note"><strong>Note</strong>: When using the NFS volume service, an extra parameter `share` is required by using the `-c` flag and a JSON. This parameter forwards what NFS server and share is needed for the service to the broker.
  E.G.: `cf create-service nfs Existing nfs_service_instance -c '{"share": "10.10.10.10/export/myshare"}'

1. <a href="../devguide/services/managing-services.html#bind">Bind the service to an app.</a>

<p class="note"><strong>Note</strong>: When using the NFS volume service, two extra parameters are needed `gid` and `uid`. This again can be specified by the `-c` flag and a JSON. This parameter specifies what `gid` and `uid` should be used when mounting the share to the application.
  E.G.: ` cf bind-service my-app nfs_service_instance -c '{"uid":"1000","gid":"1000"}'
## <a id='app'></a> Access the Volume Service from your App

To access the volume service from your app, you must know which file path to use in your code. You can view the file path in the details of the service binding, which are available from the [VCAP_SERVICES](../deploy-apps/environment-variable.html#view-env) environment variable. Follow the steps below.

1. Run the `cf env` command to view environment variables for your app:
  <pre class="terminal">
  $ cf env YOUR-APP
  "VCAP\_SERVICES": {
   "nfs": [
    {
     "credentials": {},
     "label": "nfs",
     "name": "nfs_service_instance",
     "plan": "Existing",
     "provider": null,
     "syslog_drain_url": null,
     "tags": [
      "nfs"
     ],
     "volume_mounts": [
      {
       "container_dir": "/var/vcap/data/153e3c4b-1151-4cf7-b311-948dd77fce64",
       "device_type": "shared",
       "mode": "rw"
      }
     ]
    }
   ]
  }
  </pre>

2. Utilize the properties under `volume_mounts` for any information your application may need as outlined below.

`container_dir` --> String containing the path to where the volume you have bound to your application is mounted in the environment.
`device_type` --> Currently only `shared` devices are supported. A `shared` device represents a distributed file system which can be mounted on all app instances simultaneously.
`mode` --> Determines if your app will have the ability to only read `ro`, or read and write `rw`.
