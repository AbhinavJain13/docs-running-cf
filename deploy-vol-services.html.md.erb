---
title: Adding Volume Services to your Deployment
owner: Diego Persistence
---

This document describes how CF operators can deploy volume services in Cloud Foundry (CF).

##<a id="overview"></a> Overview

A volume service gives apps access to an ephemeral filesystem, such as NFS. To provide a volume service for CF developers to use with their apps, you must deploy a driver and broker pair as outlined below in [Example: Deploy NFS to AWS](#example).

For more information about volume services and the drivers and brokers available to CF, see the following links:

* [Volume Services Google Doc](https://docs.google.com/document/d/1YtPMY9EjxlgJPa4SVVwIinfid_fshCF48xRhzyoZhrQ/edit?usp=sharing)
* [NFS Volume Release Repository](https://github.com/cloudfoundry-incubator/nfs-volume-release)
* [EFS Volume Release Repository](https://github.com/cloudfoundry-incubator/efs-volume-release)
* [CEPHFS Release Repository](https://github.com/cloudfoundry-incubator/cephfs-bosh-release)

<p class="note"><strong>Note</strong>: When trying volume services out for the first time, you can deploy the [Local Volume Release](https://github.com/cloudfoundry-incubator/local-volume-release.git) if running a single Diego Cell CF deployment. We do not recommend this in production.

##<a id="example"></a> Example: Deploy NFS Volume Service to AWS

The following procedure provides an example of how to deploy the NFS broker and corresponding driver on AWS.
* These instructions require a v260+ BOSH director. Refer to the Release Repositories for more info.

### Step 1: Enable Volume Services in CF

1. Run the following command to list the VMs deployed by your BOSH director:
	<pre class="terminal">$ bosh vms </pre>
	* Examine the output for the CF Cloud Controller VM and note the corresponding `deployment name` for use in the next step.
1. Run the following command using the `deployment name` from the last step to download your CF deployment manifest:
  <pre class="terminal"> $ bosh download manifest YOUR-CF-DEPLOYMENT-NAME > cf.yml</pre>
1. Add the following property to the `cf.yml` manifest if it does not already exist.
	`properties: cc: volume_services_enabled: true`
1. Redeploy CF with volume services enabled!
	<pre class="terminal">$ bosh -d cf.yml deploy</pre>

###<a id="driver"></a> Step 2: Add the NFS Driver to Diego Cells

1. Download the `nfs-volume-release` release from [bosh.io](http://bosh.io/releases/github.com/cloudfoundry-incubator/nfs-volume-release)
1. Target your deployment using the BOSH CLI.
	<pre class="terminal">$ bosh target BOSH-DIRECTOR-IP</pre>
1. Upload the release to your BOSH director
	<pre class="terminal">$ bosh upload release PATH-TO-DOWNLOADED-NFS-VOLUME-RELEASE</pre>
	* Note the `version` of the release you just uploaded from the output for use later.

	```
	Release info
	------------
	Name:    nfs-volume
	<strong>Version: 0.0.11</strong>
	```
1. Run the following command to list the VMs deployed by your BOSH director:
	<pre class="terminal">$ bosh vms </pre>
	* Examine the output for the diego cell VMs labeled `cell_*` and note the corresponding `deployment name` for use in the next step.
1. Create a new `runtime-config.yml` with the following content:
	* For `version`, use the noted `version` from prior steps.
	* For `deployments`, use the noted `deployment name` from the previous step.

	```
	---
	releases:
	- name: nfs-volume
	  version: YOUR-VERSION-HERE
	addons:
	- name: voldrivers
	  include:
	    deployments:
	    - YOUR-DIEGO-DEPLOYMENT-NAME
	    jobs:
	    - name: rep
	      release: diego
	  jobs:
	  - name: nfsv3driver
	    release: nfs-volume
	    properties: {}
	```
1. Update the BOSH runtime configuration:
	<pre class="terminal">$ bosh update runtime-config runtime-config.yml</pre>
1. Download the Diego manifest:
	<pre class="terminal">$ bosh download manifest YOUR-DIEGO-DEPLOYMENT-NAME > diego.yml</pre>
1. Deploy Diego:
	<pre class="terminal"> $ bosh -d diego.yml deploy</pre>

###<a id="stubs"></a>Step 3: Create NFS Broker VM - Create Stub Files

In order to create a NFS Service Broker we need to combine pieces of information into a single BOSH manifest that we will deploy. We will put these pieces into stubs and then utilize a script to combine them.

#### Cloud Foundry Stub
1. Run the following command to list the VMs deployed by your BOSH director:
	<pre class="terminal">$ bosh vms </pre>
	* Examine the output for the CF Nats VM labeled `nats_*` and note the corresponding `deployment name` for use in the next step.
1. Run the following command using the `deployment name` from the last step to download your CF deployment manifest:
  <pre class="terminal"> $ bosh download manifest YOUR-CF-DEPLOYMENT-NAME > cf.yml</pre>

#### Director Stub

1. Run the following command to determine the UUID of your BOSH director:
	<pre class="terminal"> $ bosh status --uuid</pre>

2. Create a new `director.yml` file with the following contents from the last step:

	```
	---
	director_uuid: YOUR-UUID
	---
	```

#### IaaS Settings Stub

<p class="note"><strong>Note</strong>: This is an AWS specific IaaS Settings Stub. If deploying on another IaaS use the templates available with in each github release respository under the `templates` folder and fill in with the appropriate fields needed by BOSH.

Create an `iaas.yml` stub which will be specific to your IaaS. Replace each of the below parameters in the stub:

`<--PUBLIC-BROKER-IP-->` --> Pre-Allocated AWS Elastic IP
`<--SECURITY-GROUP-->` --> Security Group where the NFS Broker will be created. Ensure this security group has access to the security group your CF is deployed in.
`<--SUBNET-->` --> Subnet where the NFS Broker will be created. Ensure this subnet has access to the subnet your CF is deployed in.
`<--DNS-->` --> DNS IP address.
`<--GATEWAY-->` --> Gateway address.
`<--SUBNET-RANGE-->` --> CIDR range of the subnet where the NFS Broker will be created.
`<--RESERVED-IPs-->` --> Array of IPs that BOSH will not use for the NFS Broker. `E.G.: 10.10.200.0 - 10.10.200.10`
`<--STATIC-IPs-->` --> Array of IPs that BOSH can use for the NFS Broker. `E.G.: 10.10.200.10 - 10.10.200.100`

	```
	 ---
     jobs:
     - name: nfsbroker
       networks:
       - name: public
         static_ips: [<--PUBLIC-BROKER-IP-->]

     networks:
     - name: nfsvolume-subnet
       subnets:
       - cloud_properties:
           security_groups:
           - <--SECURITY-GROUP-->
           subnet: <--SUBNET-->
         dns:
         - <--DNS-->
         gateway: <--GATEWAY-->
         range: <--SUBNET-RANGE-->
         reserved:
         - <--RESERVED-IPs-->
         static:
         - <--STATIC-IPs-->

     resource_pools:
       - name: medium
         stemcell:
            name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
            version: latest
         cloud_properties:
           instance_type: m3.medium
           availability_zone: us-east-1c
       - name: large
         stemcell:
           name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
           version: latest
         cloud_properties:
           instance_type: m3.large
           availability_zone: us-east-1c
	```
#### Credentials Stub

Create a `creds.yml` file and paste in the following contents, replacing the indicated values with a username and password of your choosing:

```
    ---
properties:
  nfsbroker:
    username: <BROKER_USERNAME>
    password: <BROKER_PASSWORD>
```

#### Step 2: Create NFS Broker VM - Generate the Deployment Manifest

1. Download the script from github using the `git cli`
<pre class="terminal">
$ git clone https://github.com/cloudfoundry-incubator/nfs-volume-release.git
</pre>

Run the following script to generate a deployment manifest based on your stubs:

<pre class="terminal">
$ ./scripts/generate\_manifest.sh cf.yml director-uuid.yml iaas.yml creds.yml
</pre>

###<a id="broker"></a>Step 4: Create NFS Broker VM - Deploy the Broker

1. Deploy the broker using the generated manifest:
	<pre class="terminal">
	$ bosh -d nfsvolume-aws-manifest.yml deploy
	</pre>

1. Register the broker using the credentials specified in the `creds.yml` and grant access to it's service with the following commands

	<pre class="terminal">
	$ cf create-service-broker nfsbroker <BROKER_USERNAME> <BROKER_PASSWORD> http://nfs-broker.YOUR.DOMAIN.com
	$ cf enable-service-access nfs
	</pre>

	CF Developers can now create an NFS service and bind instances to their apps as outlined in [Using Volume Services](../volume-services-v2.10.html)
