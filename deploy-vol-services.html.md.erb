---
title: Adding Volume Services to your Deployment
owner: Diego Persistence
---

This document describes how CF operators can deploy volume services in Cloud Foundry (CF). 

##<a id="overview"></a> Overview 

A volume service gives apps access to an ephemeral filesystem, such as NFS. To provide a volume service for CF developers to use with their apps, you must deploy a driver and broker as outlined below in [Example: Deploy NFS to AWS](#example).

For more information about volume services and the drivers and brokers available to CF, see the following links:

* [NFS Volume Release Repository](https://github.com/cloudfoundry-incubator/nfs-volume-release)
* [EFS Volume Release Repository](https://github.com/cloudfoundry-incubator/efs-volume-release) 
* [Local Volume Release Repository for BOSH-Lite](https://github.com/cloudfoundry-incubator/local-volume-release)
* [CEPHFS Release Repository](https://github.com/cloudfoundry-incubator/cephfs-bosh-release)
* [Volume Services Google Doc](https://docs.google.com/document/d/1YtPMY9EjxlgJPa4SVVwIinfid_fshCF48xRhzyoZhrQ/edit?usp=sharing)

##<a id="example"></a> Example: Deploy NFS to AWS 

The following procedure provides an example of how to deploy the NFS broker and driver on AWS. 

###<a id="driver"></a> Step 1: Add the Driver to Diego

1. Download the `nfs-volume-release` release from bosh.io NEED LINK
1. Target your deployment using the BOSH CLI. 
	<pre class="terminal">$ bosh target BOSH-DIRECTOR-IP</pre>
1. Upload the release to your deployment
	<pre class="terminal">$ NEED COMMAND </pre>
1. Run the following command to list the VMs in your CF deployment:
	<pre class="terminal">$ bosh vms </pre>
	* Examine the output for diego cell VMs and record the corresponding deployment name for use in the next step. 
1. Create a new `runtime-config.yml` with the following content:
	* For `version`, enter....
	* For `deployments`, enter the name of your Diego deployment from the previous step.

	```
	---
	releases:
	- name: nfs-volume
	  version: YOUR-VERSION-HERE
	addons:
	- name: voldrivers
	  include:
	    deployments:
	    - YOUR-DIEGO-DEPLOYMENT-NAME
	    jobs:
	    - name: rep
	      release: diego
	  jobs:
	  - name: nfsv3driver
	    release: nfs-volume
	    properties: {}
	```
1. Update the runtime configuration:
	<pre class="terminal">$ bosh update runtime-config runtime-config.yml</pre>
1. Download the Diego manifest:
	<pre class="terminal">$ bosh download manifest <YOUR DIEGO DEPLOYMENT NAME> diego.yml</pre>
1. Deploy Diego:
	<pre class="terminal"> $ bosh -d diego.yml deploy</pre>

###<a id="stubs"></a>Step 2: Create Stub Files and Generate Manifest

#### Cloud Foundry Stub

Run the following command to download your CF deployment manifest:
<pre class="terminal"> $ bosh download manifest YOUR-CF-DEPLOYMENT-NAME > cf.yml</pre>

#### Director Stub

1. Run the following command to determine the UUID of your BOSH director:
	<pre class="terminal"> $ bosh status --uuid</pre>

2. Create a new `director.yml` file with the following contents:

	```
	---
	director_uuid: YOUR-UUID
	---
	```

#### IaaS Settings Stub

Create an `iaas.yml` file with the following contents, replacing the values where indicated:

GIVE SOME EXPLANATION OF THIS FILE AND THE VALUES TO REPLACE

	```
	 ---
     jobs:
     - name: nfsbroker
       networks:
       - name: public
         static_ips: [<--- STATIC IP WANT YOUR NFSBROKER TO BE IN --->]

     networks:
     - name: nfsvolume-subnet
       subnets:
       - cloud_properties:
           security_groups:
           - <--- SECURITY GROUP YOU WANT YOUR NFSBROKER TO BE IN --->
           subnet: <--- SUBNET YOU WANT YOUR NFSBROKER TO BE IN --->
         dns:
         - 10.10.0.2
         gateway: 10.10.200.1
         range: 10.10.200.0/24
         reserved:
         - 10.10.200.2 - 10.10.200.9
         # ceph range 10.10.200.106-110
         # local range 10.10.200.111-115
         # efs range 10.10.200.116-120
         - 10.10.200.106 - 10.10.200.120
         # -> nfs range 10.10.200.121-125 <-
         static:
         - 10.10.200.10 - 10.10.200.105
 
     resource_pools:
       - name: medium
         stemcell:
            name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
            version: latest
         cloud_properties:
           instance_type: m3.medium
           availability_zone: us-east-1c
       - name: large
         stemcell:
           name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
           version: latest
         cloud_properties:
           instance_type: m3.large
           availability_zone: us-east-1c
	```

#### Credentials Stub

Create a `creds.yml` file and paste in the following contents, replacing the indicated values with of username and password of your choosing:

```
    ---
properties:
  nfsbroker:
    username: <BROKER_USERNAME>
    password: <BROKER_PASSWORD>
```

#### Generate a Manifest

Run the following script to generate a deployment manifest based on your stubs:

WHERE DO THEY GET THIS SCRIPT?

<pre class="terminal">
$ ./scripts/generate\_manifest.sh director-uuid.yml iaas.yml
</pre>

###<a id="broker"></a>Step 3: Deploy the Broker

1. Deploy the broker using the generated manifest:
	<pre class="terminal">
	$ bosh -d nfsvolume-aws-manifest.yml deploy
	</pre>

1. Register the broker and grant access to it's service with the following commands

	<pre class="terminal">
	$ cf create-service-broker nfsbroker <BROKER_USERNAME> <BROKER_PASSWORD> http://nfs-broker.YOUR.DOMAIN.com
	$ cf enable-service-access nfs
	</pre>

	CF Developers can now create an and NFS service and bind instances to their apps as outlined in [Using Volume Services](../volume-services-v2.10.html)
